searchState.loadedDescShard("server_wasi", 0, "Auto-generate TLS certificate using Let’s Encrypt\nBase domain for function subdomains\nPath to the certs directory\nPath to the SledDB database directory\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPath to the functions directory\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEmail address for Let’s Encrypt\nUse Let’s Encrypt staging environment (for testing)\nAddress to listen on (e.g., 0.0.0.0:443)\nPath to the TLS certificate file (PEM format)\nPath to the TLS private key file (PEM format)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStruct to hold GitHub auth configuration\nAdd a project to a user’s list\nCheck if a user can upload more projects (limit is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemove a project from a user’s list\nValidate OAuth token directly with GitHub API\nVerify that a user owns a function using the stored HMAC\nFlush in-memory metrics to persistent DB and reset …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpawn a Tokio task to periodically flush metrics to DB …\nSled tree name for function metadata\nImplementation of the FunctionService\nHelper function to create a service implementation with …\nReturns the argument unchanged.\nExtract username from GitHub token\nCalls <code>U::from(self)</code>.\nCreate a new FunctionServiceImpl Create a new …\nValidate GitHub authentication token")