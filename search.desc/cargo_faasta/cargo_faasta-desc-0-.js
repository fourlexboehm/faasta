searchState.loadedDescShard("cargo_faasta", 0, "Library for cargo-faasta CLI commands.\nManages GitHub authentication for the CLI\nAuthenticate with GitHub\nGet user ID from authenticated GitHub instance\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the path to the config file\nGet the list of projects owned by the user\nGet project HMAC if it exists\nGet user ID if available\nCheck if user has reached project limit\nGet authentication header for API requests\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if GitHub app is configured\nLoad config from disk\nInitialize GitHub authentication\nCheck if a project is owned by the current user\nSave config to disk\nSetup GitHub app credentials\nStore project HMAC for ownership verification\nReturns the argument unchanged.\nGet client ID from environment or use default\nGet client secret from environment or use default\nGets the GitHub username from the user’s profile\nCreate an OAuth client for GitHub\nGet the test mode status and credentials\nPerforms the GitHub OAuth flow and returns the username …\nCalls <code>U::from(self)</code>.\nStarts a local HTTP server to receive the OAuth redirect\nWaits for and processes the OAuth callback\nCLI arguments for the <code>init</code> command\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe name of the package to create\nReplaces the line <code>name = &quot;whatever&quot;</code> inside <code>[package]</code> with …\nWrites the embedded Cargo.toml &amp; main.rs to disk, updating …\nBuild the project for wasm32-wasip2 target\nGet the target directory and package name for the current …\nCompare two file paths in a slightly more robust way. (On …")